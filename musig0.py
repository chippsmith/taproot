import util
from test_framework.key import ECKey, ECPubKey, generate_key_pair, generate_bip340_key_pair, generate_schnorr_nonce
from test_framework.messages import sha256
from test_framework.musig import aggregate_musig_signatures, aggregate_schnorr_nonces, generate_musig_key, sign_musig
from test_framework.script import tagged_hash


### https://eprint.iacr.org/2018/068.pdf

### Need to protect against key cancelation attack
### To counter the key cancellation attack, each participant's pubkey is tweaked by a challenge factor, which is generated by hashing all the participants' pubkeys together.


### generate_musig_key() returns a challenge map and the aggregate public key.
### The challenge map contains ECPubKey_i, challenge_data_i key - value pairs.

# Compute key pairs
privkey1, pubkey1 = generate_key_pair(sha256(b'key0'))
privkey2, pubkey2 = generate_key_pair(sha256(b'key1'))
privkey3, pubkey3 = generate_key_pair(sha256(b'key2'))
pubkeys = [pubkey1, pubkey2, pubkey3]

c_map, pubkey_agg = generate_musig_key(pubkeys)

# Multiply key pairs by challenge factor
privkey1_c = privkey1 * c_map[pubkey1]
privkey2_c = privkey2 * c_map[pubkey2]
privkey3_c = privkey3 * c_map[pubkey3]
pubkey1_c = pubkey1 * c_map[pubkey1]
pubkey2_c = pubkey2 * c_map[pubkey2]
pubkey3_c = pubkey3 * c_map[pubkey3]

# Determine if the private and public keys need to be negated. 
# Hint: The aggregate public key is the one that needs to be valid.
if pubkey_agg.get_y() % 2 != 0:
    privkey1_c.negate() 
    privkey2_c.negate()  
    privkey3_c.negate()  
    pubkey1_c.negate()  
    pubkey2_c.negate()    
    pubkey3_c.negate() 
    pubkey_agg.negate()

print("Tweaked privkey1 is {}".format(privkey1_c))
print("Tweaked privkey2 is {}".format(privkey2_c))
print("Tweaked privkey3 is {}".format(privkey3_c))

assert privkey1_c.secret == 104717570570407299858230629579807834166658508605015363884161538594382975780625
assert privkey2_c.secret == 65554880484297966965546994775376394861215085064604177497808278620612854069980
assert privkey3_c.secret == 106998690642216524894360365246223287721822845133760006050846956016514597569168

print("\nSuccess!")